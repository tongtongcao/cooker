#include <tutorial.h>

#include<cmath>
#include <fstream>
#include <iostream>
#include <TStyle.h>
#include <vector>
using namespace std;

Long_t tutorial::hist_calibS(){
h1Pedestal=new TH1D("Peak","Calibration Peak for AC;AC Paddle [U1-12,D1-12]",24,0.5,24.5);
  for(int iAc=0;iAc<12;iAc++){
    string name("AcU_");
    name+=(iAc+1)/10+'0';
    name+=(iAc+1)%10+'0';
    pedADC_AcU[iAc]=new peakSelect(100,0,1500,name);

  }
  
  for(int iAc=0;iAc<12;iAc++){
    string name("AcD_");
    name+=(iAc+1)/10+'0';
    name+=(iAc+1)%10+'0';
    pedADC_AcD[iAc]=new peakSelect(100,0,1500,name);
  }

  return 0;

}

Long_t tutorial::start_calibS(){
  getBranchObject("RawAcInfo",(TObject **) &treeRaw);
  gStyle->SetOptStat(0);
  return 0;
};

Long_t tutorial::calib_peakS(){
  for(int iAc = 0; iAc < 12; iAc++){
    if(treeRaw->ADC_ACU[iAc] > 0)
      pedADC_AcU[iAc]->addData(treeRaw->ADC_ACU[iAc]);
    if(treeRaw->ADC_ACD[iAc] > 0)
      pedADC_AcD[iAc]->addData(treeRaw->ADC_ACD[iAc]);
  }
  return 0;
};

Long_t tutorial::done_calibS(){
  
ofstream file1, file2, file3, file4;
  int runNo = treeRaw->run;
    file1.open("pedRun"+std::to_string(runNo)+"D.txt", ios::app);
    file2.open("pedRun"+std::to_string(runNo)+"U.txt", ios::app);
    file3.open("sigma"+std::to_string(runNo)+"D.txt", ios::app);
    file4.open("sigma"+std::to_string(runNo)+"U.txt", ios::app);

  double pedestal[24],sigma[24];
  for(int iAc = 0; iAc < 12; iAc++){
    double ped1U=pedADC_AcU[iAc]->getPedestal();
    double err1U=pedADC_AcU[iAc]->getError();
    double sigmU=pedADC_AcU[iAc]->getSigma();
    double errSU=pedADC_AcU[iAc]->getSigmaError();
    h1Pedestal->SetBinContent(1+iAc,ped1U);
    h1Pedestal->SetBinError(1+iAc,err1U);
    h1Pedestal->SetBinError(1+iAc,sigmU);
    h1Pedestal->SetBinError(1+iAc,errSU);
    pedestal[iAc]=ped1U;
    //cout<<ped1U<<"&";
cout<<runNo<<endl;
    double ped1D=pedADC_AcD[iAc]->getPedestal();
    double err1D=pedADC_AcD[iAc]->getError();
    double sigmD=pedADC_AcD[iAc]->getSigma();
    double errSD=pedADC_AcD[iAc]->getSigmaError();
    h1Pedestal->SetBinContent(13+iAc,ped1D);
    h1Pedestal->SetBinError(13+iAc,err1D);
    h1Pedestal->SetBinError(1+iAc,sigmD);
    h1Pedestal->SetBinError(1+iAc,errSD);
    //cout<<ped1D<<"\\"<<endl;
    pedestal[iAc+12]=ped1D;
      //file1<<runNo<<"\t";
    
    int size_of_array = sizeof(pedestal)/sizeof(pedestal[0]);
    std::vector<double> pedestal_1(pedestal, pedestal+size_of_array);
    pedestal_1.insert(pedestal_1.begin(),runNo);
    //for(Int_t i =0; i<12; i++){
    //  cout <<"elemests of pedestal_1" << pedestal_1[i] << endl; // 
    // } 

      file1<< pedestal_1[iAc+12] <<"\t";
      file2<< pedestal[iAc] <<"\t";
      file3<< sigma[iAc+12] <<"\t";
      file4<< sigma[iAc] <<"\t";
  
}

    file1 << "\n";
    file2 << "\n";
    file3 << "\n";
    file4 << "\n";

  return 0;
}
